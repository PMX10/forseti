/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace Foresti
{
    public sealed class Flags : LCM.LCM.LCMEncodable
    {
        public double[,] goals;
 
        public Flags()
        {
            goals = new double[4,5];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x79b5665928888393L;
 
        static Flags()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("Foresti.Flags"))
                return 0L;
 
            classes.Add("Foresti.Flags");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 4; a++) {
                for (int b = 0; b < 5; b++) {
                    outs.Write(this.goals[a,b]); 
                }
            }
 
        }
 
        public Flags(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public Flags(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static Foresti.Flags _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            Foresti.Flags o = new Foresti.Flags();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.goals = new double[(int) 4,(int) 5];
            for (int a = 0; a < 4; a++) {
                for (int b = 0; b < 5; b++) {
                    this.goals[a,b] = ins.ReadDouble();
                }
            }
 
        }
 
        public Foresti.Flags Copy()
        {
            Foresti.Flags outobj = new Foresti.Flags();
            outobj.goals = new double[(int) 4,(int) 5];
            for (int a = 0; a < 4; a++) {
                for (int b = 0; b < 5; b++) {
                    outobj.goals[a,b] = this.goals[a,b];
                }
            }
 
            return outobj;
        }
    }
}

